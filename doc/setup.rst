.. highlight:: rest

******
Setups
******

.. index:: Setups

Overview
========

PYPIT distinguishes between various configurations
for a given instrument when processing calibrations,
generating Master frames, and performing the data
reduction.  This Table summarizes the parameters that
specify a unique setup:

========= ======== ====== ======== =======================================
Element   Setting  Type   Example    Description
========= ======== ====== ======== =======================================
detector  binning  str    2,2      On-chip binning of the detector
 ..       det      int    1        Index of the detector; starts at 1
 ..       naxis0   int    2048     x dimension of the image
 ..       naxis1   int    2048     y dimension of the image
dichroic  ...      str    560      Dichroic name
disperser angle    float  23.4     Number specifying tilt of the grating
 ..       name     str    600/4000 Name of the dispersing element
slit      decker   str    long_1.0 Name of decker or slit mask
 ..       slitlen  float  120.     Number describing slit length
 ..       slitwid  float  1.       Number describing slit width
========= ======== ====== ======== =======================================

Each setup is given a unique setup ID value which is a
two digit number starting at 01 (stored as a string).

If you tend to observe with one instrument configuration
and with a simple set of calibrations, then setup should
be straightforward.  If you use multiple configurations
(e.g. gratings, grating tilts), then one must pay more
careful attention to the setups.

.. _pypit_setup:

pypit_setup
===========

PYPIT includes a script that one may execute (*highly recommended*)
to initiate the data reduction process.  This script helps organize
the primary data reduction process that follows.  It also
generates a .setups file describing the various setups found
amongst the files parsed.

**Important**: To identify a setup, the code must recognize at
least one science frame in a given configuration and an associated arc.
You may need to specify the frametype of a given file if the code
is failing to automatically recognize your science or arc frames.

Execution
---------

The setup script requires two inputs: the root of the data
files (with the full path) and the instrument name.  Here is an example::

    pypit_setup /Users/xavier/Keck/LRIS/data/2016apr06/Raw/LB lris_blue

The code will search for all FITS files with the inputted root.
Note that the root should **not** contain a wild-card.

Alternatively, one can generate a PYPIT File (with extension .pypit)
and add `run setup True` to the file.

Note that both of these options set default values in the codes
and may over-ride user settings.

Internals
=========

See :ref:`internal_setup_dict` for a definition of the
object used interally.

Outputs
=======

The pypit_setup script generates several outputs.

.. _setups-file:

Setups File
-----------

One of the files generated by pypit_setup
is a .setups file, e.g. lris_blue_2016-Nov-18.setups.  This file describes
all of the instrument configurations that were parsed by the
code from the input raw files.  It is a YAML file and each
top-level key indicates a setup value, e.g. '01'.
Note that PYPIT generates a unique setup for every detector in the
instrument.

The remainder of the information in the .setup file describes
the instrument configuration.

**Important:**  There can be only one .setup file in a working
PYPIT reduction folder for each instrument being reduced.

Here is sample output for the LRISb instrument::

     A:
      --:
        dichroic: '560'
        disperser: {angle: None, name: 600/4000}
        slit: {decker: long_1.0, slitlen: None, slitwid: None}
      '01': {binning: '2,2', det: 1, namp: 2}
      '02': {binning: '2,2', det: 2, namp: 2}
     B:
      --:
        dichroic: '560'
        disperser: {angle: None, name: 600/4000}
        slit: {decker: npc05.fi, slitlen: None, slitwid: None}
      '01': {binning: '2,2', det: 1, namp: 2}
      '02': {binning: '2,2', det: 2, namp: 2}

PYPIT files
-----------

The script automatically generates one PYPIT file per
setup.  The setup details are listed and the data read
block is limited to the files grouped with that setup.
See :doc:`pypit_file` for a greater description of editing
the PYPIT files.

Data Listings
-------------

Three files are generated which describe the input raw files,
line by line.  These have .lst, .xml, and .sorted extensions.

Data pulled from the header are shown here.  In addition, the
frametype assigned by PYPIT is specified.  If any of these are
mis-specified (possible), they should be correctly specified
in your Settings File.

None of these files are intended to be modified by the
user.

.. _sorted-file:

Sorted File
+++++++++++

This file is perhaps the most useful for specifying files
in your PYPIT file.  Files are sorted by instrument configuration
(setup) and then by frametype.

Here is some sample output::

    ##########################################################
    Setup A
    --:
      dichroic: '560'
      disperser: {angle: None, name: 600/4000}
      slit: {decker: long_1.0, slitlen: None, slitwid: None}
    '01': {binning: '2,2', det: 1, namp: 2}
    '02': {binning: '2,2', det: 2, namp: 2}
    #---------------------------------------------------------
    |               filename |                date |   frameno |  frametype |         target | exptime | dispname |   decker |
    | LB.20160406.11620.fits | 2016-04-06T03:13:44 |      1001 |        arc |        unknown |       1 | 600/4000 | long_1.0 |
    | LB.20160406.11483.fits | 2016-04-06T03:11:26 |      1002 |        arc |        unknown |       1 | 600/4000 | long_1.0 |
    | LB.20160406.35081.fits | 2016-04-06T10:14:44 |      1003 |    science |     J1201+2117 |    1800 | 600/4000 | long_1.0 |
    ##end


Listing File
++++++++++++

All files are listed, ordered by filename.
More information is provided than in the .sorted file.


.. _groupings:

.. Groupings
.. ---------

.. A .group file is generated which describes how PYPIT will
group calibrations, science, and standard star frames when
performing the reduction.  If there are incorrect or undesired
calibration files listed, these should be suppressed with
the Settings File (alternatively one can remove them from the raw data
folder, but we *recommend* against this practice).

.. Setups that only differ by detector are grouped together in
the .group file. For example, '01_02' is a single instrument configuration
with two detectors.  The next configuration would likely
be named '03_04', etc.

.. Here is example output of a .group file for Kast (which has
only 1 detector per spectrograph)::

..     '01':
..       arc: [b1.fits.gz]
      bias: [b23.fits.gz, b22.fits.gz, b21.fits.gz]
      pixelflat: [b13.fits.gz, b12.fits.gz, b11.fits.gz]
      science: [b27.fits.gz, b28.fits.gz, b29.fits.gz]
      sciobj: [J1217p3905, J1217p3905, J1217p3905]
      trace: [b13.fits.gz, b12.fits.gz, b11.fits.gz]
      standard: [b24.fits.gz]
      stdobj: [Feige 66]
      pinhole: []

.. Here is one for LRISb which has two detectors::

..     '01_02':
..      arc: [LB.20160406.11620.fits, LB.20160406.11483.fits]
      bias: []
      pixelflat: [LB.20160406.19768.fits, LB.20160406.18944.fits, LB.20160406.18889.fits,
        LB.20160406.18831.fits, LB.20160406.18780.fits, LB.20160406.18731.fits, LB.20160406.18679.fits,
        LB.20160406.18632.fits, LB.20160406.18583.fits, LB.20160406.18468.fits, LB.20160406.18370.fits]
      science: [LB.20160406.21160.fits, LB.20160406.23011.fits, LB.20160406.24861.fits,
        LB.20160406.35081.fits, LB.20160406.36935.fits]
      sciobj: [J0817+1351, J0817+1351, J0817+1351, J1201+2117, J1201+2117]
      trace: [LB.20160406.19768.fits, LB.20160406.18944.fits, LB.20160406.18889.fits,
        LB.20160406.18831.fits, LB.20160406.18780.fits, LB.20160406.18731.fits, LB.20160406.18679.fits,
        LB.20160406.18632.fits, LB.20160406.18583.fits, LB.20160406.18468.fits, LB.20160406.18370.fits,
        LB.20160406.18257.fits, LB.20160406.18128.fits, LB.20160406.18012.fits, LB.20160406.17958.fits,
        LB.20160406.17903.fits, LB.20160406.17832.fits, LB.20160406.17779.fits, LB.20160406.17716.fits,
        LB.20160406.17643.fits, LB.20160406.17590.fits, LB.20160406.17533.fits]
      standard: [LB.20160406.19768.fits, LB.20160406.19649.fits]
      stdobj: [Feige 34, Feige 34]
      pinhole: [LB.20160406.19768.fits, LB.20160406.18944.fits, LB.20160406.18889.fits,
        LB.20160406.18831.fits, LB.20160406.18780.fits, LB.20160406.18731.fits, LB.20160406.18679.fits,
        LB.20160406.18632.fits, LB.20160406.18583.fits, LB.20160406.18468.fits, LB.20160406.18370.fits,
        LB.20160406.18257.fits, LB.20160406.18128.fits, LB.20160406.18012.fits, LB.20160406.17958.fits,
        LB.20160406.17903.fits, LB.20160406.17832.fits, LB.20160406.17779.fits, LB.20160406.17716.fits,
        LB.20160406.17643.fits, LB.20160406.17590.fits, LB.20160406.17533.fits]

.. _setup-modifications:

Modifications
=============

If the .setups file does not indicate all of your instrument
configurations or the .group file is missing expected
calibrations, this is most likely because you either have
not included all of your raw frames or a number of files have
been misclassified by the code.

Inspect the listing (.lst file) to confirm all of the frames
have been examined and check the designated frametype.

If you have not included all of the frames, add one or more entries
to the :ref:`data_block` in the .pypit file
If you wish to manually set the frametype of a file, add
this to the :ref:`spect_block` in the .pypit file.
See :doc:`pypit_file` for further details.

After making modifications,
remove the existing .setup file and rerun the pypit_setup
script on the modified .pypit file, e.g.::

    pypit_setup -pypit_file lris_blue_2016-Nov-23.pypit lris_blue


